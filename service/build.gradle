import static org.gradle.api.JavaVersion.VERSION_1_7

apply plugin: 'java'
apply plugin: 'cobertura'
apply plugin: 'idea'
apply plugin: 'fatjar'
apply plugin: 'application'

idea{
    module{
        name = "PriceService"
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.mapvine:gradle-cobertura-plugin:1.0'
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'
    }
}

sourceCompatibility = VERSION_1_7
targetCompatibility = VERSION_1_7

allprojects {
    def versionNumber = System.getenv("BUILD_NUMBER")
    if (versionNumber) {
        project.version = versionNumber
    } else {
        project.version = 'developer-build'
    }
}


repositories {
    mavenCentral()
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {
    compile group: 'com.yammer.dropwizard', name: 'dropwizard-core', version: '0.6.2'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '2.11.1'
    compile group: 'com.yammer.metrics', name: 'metrics-core',version: '2.0.0'
    compile group: 'com.yammer.metrics', name: 'metrics-graphite',version: '2.2.0'
    compile group: 'com.yammer.metrics', name: 'metrics-servlet',version: '2.2.0'
    compile group: 'com.googlecode.lambdaj', name: 'lambdaj', version: '2.3.3'

    testCompile group: "junit", name: "junit", version: "4.11"
    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M8'
    testCompile group: 'com.yammer.dropwizard', name: 'dropwizard-testing', version: '0.6.2'
    testCompile group: 'com.yammer.dropwizard', name: 'dropwizard-client', version: '0.6.2'
    testCompile group: 'org.mongodb', name: 'mongo-java-driver', version: '2.11.1'
}


mainClassName = 'com.tesco.services.Controller'

fatJar {
    baseName = 'price-service'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    exclude 'META-INF/.DSA', 'META-INF/.RSA', 'META-INF/*.SF'
}

task zip(type: Zip) {
    baseName = 'price-service'
    from fatJar.outputs.files
    from ('.'){
        include "*.yml"
        include 'runService'
        include 'version'
    }
}

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
sourceSets {
    main {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
    test {
        runtimeClasspath = files(output.resourcesDir) + runtimeClasspath
    }
}

test {
    systemProperties 'environment': System.getProperty("environment")
    jvmArgs '-XX:-UseSplitVerifier'
    include '**/**'
}

run {
    def environment = System.getProperty('environment')
    if (!environment){
        environment = 'local'
    }
    args 'server', environment + '.yml'
}


// see https://github.com/Mapvine/gradle-cobertura-plugin
cobertura {
    format = 'xml'
    includes = ['**/*.java']
}
